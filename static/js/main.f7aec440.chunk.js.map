{"version":3,"sources":["data/api.ts","contexts/statContext.tsx","data/types/stat.ts","components/filters.tsx","components/communitiesStats.tsx","App.tsx","last_updated.ts","serviceWorker.ts","index.tsx"],"names":["responseToStats","response","a","text","rawStats","stats","split","filter","line","test","map","sl","rawCommunity","rawDate","rawInfected","rawHospitalized","rawIntensiveHospitalized","rawDeaths","rawRecovered","community","date","moment","toDate","dateStr","format","infected","Number","hospitalized","intensiveHospitalized","deaths","recovered","aggregatedStats","Array","from","reduce","agg","stat","currAgg","get","Object","assign","set","Map","values","fetch","process","rawData","Community","statsContext","React","createContext","communitiesDict","_","zipObject","keys","linesToShowOptions","label","value","Filters","filters","handleChange","communities","entries","e","linesToShow","every","MultiCascader","cascade","data","onChange","searchable","style","marginRight","DateRangePicker","to","dates","lines","empty","includes","CommunityStat","height","lineProps","type","dot","animationDuration","Panel","header","bordered","shaded","bodyFill","defaultExpanded","direction","margin","backgroundColor","flexShrink","padding","syncId","dataKey","tickFormatter","d","v","Math","floor","width","labelFormatter","CommunitiesStats","useContext","StatContext","Set","s","display","flexDirection","overflowY","idx","key","defaultProps","App","useState","setStats","setAggregatedStats","originalStats","setOriginalStats","undefined","setFilters","useEffect","filteredStats","length","downloadStats","then","Provider","className","justifyContent","flexGrow","textAlign","flexBasis","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7aec440.chunk.js","sourcesContent":["import Stat, { Community } from './types/stat'\nimport moment from 'moment'\n\nasync function responseToStats(response: Response): Promise<[Stat[], Stat[]]> {\n    const rawStats = await response.text()\n    const stats = rawStats.split('\\n')\n        .filter(line => /[A-Z]{2},/.test(line))\n        .map(line => line.split(','))\n        .map(sl => {\n            const [rawCommunity, rawDate, rawInfected, rawHospitalized, rawIntensiveHospitalized, rawDeaths, rawRecovered] = sl\n            const date = moment(rawDate, 'DD/MM/YYYY').toDate()\n            const dateStr = moment(rawDate, 'DD/MM/YYYY').format()\n            const infected = Number(rawInfected)\n            const hospitalized = Number(rawHospitalized)\n            const intensiveHospitalized = Number(rawIntensiveHospitalized)\n            const deaths = Number(rawDeaths)\n            const recovered = Number(rawRecovered)\n            const community = (rawCommunity as unknown) as Community\n            return {\n                community, date, dateStr, infected, hospitalized, intensiveHospitalized, deaths, recovered\n            }\n        })\n\n    const aggregatedStats = Array.from(\n        stats.reduce(function (agg, stat) {\n            let currAgg = agg.get(stat.dateStr);\n            if (!!currAgg) {\n                currAgg = {\n                    date: stat.date,\n                    dateStr: stat.dateStr,\n                    infected: currAgg.infected + stat.infected,\n                    hospitalized: currAgg.hospitalized + stat.hospitalized,\n                    intensiveHospitalized: currAgg.intensiveHospitalized + stat.intensiveHospitalized,\n                    deaths: currAgg.deaths + stat.deaths,\n                    recovered: currAgg.recovered + stat.recovered,\n                }\n            } else {\n                currAgg = Object.assign({}, stat)\n            }\n            return agg.set(stat.dateStr, currAgg);\n        }, new Map<string, Stat>()).values())\n\n    return [stats, aggregatedStats]\n}\n\nexport async function downloadStats(): Promise<[Stat[], Stat[]]> {\n    const rawData = await fetch(`${process.env.PUBLIC_URL}/data/dada.csv`)\n    return responseToStats(rawData)\n}","import React from 'react'\nimport Stat from '../data/types/stat'\n\nconst statsContext = React.createContext<Stat[]>([])\n\nexport default statsContext","import _ from 'lodash'\n\nexport enum Community {\n    AN = \"Andalucia\",\n    AR = \"Arag√≥n\",\n    AS = \"Asturias\",\n    IB = \"Islas Baleares\",\n    CN = \"Islas Canarias\",\n    CB = \"Cantabria\",\n    CM = \"Castilla La Mancha\",\n    CL = \"Castilla y Le√≥n\",\n    CT = \"Catalunya\",\n    CE = \"Ceuta\",\n    VC = \"Valencia\",\n    EX = \"Extremadura\",\n    GA = \"Galicia\",\n    MD = \"Madrid\",\n    ML = \"Melilla\",\n    MC = \"Murcia\",\n    NC = \"Navarra\",\n    PV = \"Pais Vasco\",\n    RI = \"La Rioja\",\n}\n\nexport const communitiesDict = _.zipObject(Object.keys(Community), Object.values(Community))\n\nexport type Stat = {\n    community?: Community\n    date: Date\n    dateStr: string\n    infected: number\n    hospitalized: number\n    intensiveHospitalized: number\n    deaths: number\n    recovered: number\n}\n\nexport default Stat","import React from 'react'\nimport IFilters from '../data/types/filters'\nimport { MultiCascader, DateRangePicker } from 'rsuite'\nimport { communitiesDict } from '../data/types/stat'\n\ntype Props = {\n    filters: IFilters,\n    handleChange: (f: IFilters) => void\n}\n\nconst linesToShowOptions = [\n    { label: 'Infected', value: 'infected' },\n    { label: 'Hospitalized', value: 'hospitalized' },\n    { label: 'Intensive Hospitalized', value: 'intensiveHospitalized' },\n    { label: 'Deaths', value: 'deaths' },\n    { label: 'Recovered', value: 'recovered' },\n]\n\nfunction Filters({ filters, handleChange }: Props) {\n    const communities = Object.entries(communitiesDict).map(e => ({ label: e[1], value: e[0] }))\n\n    const handleChangeCommunities = (communities: any[]) => {\n        handleChange({\n            ...filters,\n            communities: communities\n        })\n    }\n\n    const handleChangeDate = (dates: any[]) => {\n        handleChange({\n            ...filters,\n            from: dates[0],\n            to: dates[1]\n        })\n    }\n\n    const handleChangeLines = (lines: any[]) => {\n        const empty = lines.every(e => !e)\n        handleChange({\n            ...filters,\n            linesToShow: {\n                deaths: empty || lines.includes('deaths'),\n                recovered: empty || lines.includes('recovered'),\n                hospitalized: empty || lines.includes('hospitalized'),\n                infected: empty || lines.includes('infected'),\n                intensiveHospitalized: empty || lines.includes('intensiveHospitalized'),\n            }\n        })\n    }\n\n    const linesToShow = Object.values(filters.linesToShow).every(e => e === true) ? [] : [\n        filters.linesToShow.hospitalized && 'hospitalized',\n        filters.linesToShow.deaths && 'deaths',\n        filters.linesToShow.infected && 'infected',\n        filters.linesToShow.recovered && 'recovered',\n        filters.linesToShow.intensiveHospitalized && 'intensiveHospitalized',\n    ]\n\n    return (\n        <>\n            <MultiCascader cascade={false} data={communities} value={filters.communities} onChange={handleChangeCommunities} searchable={false}/>\n            <span style={{marginRight: '5px'}}/>\n            <DateRangePicker value={[filters.from, filters.to]} onChange={handleChangeDate} />\n            <span style={{marginRight: '5px'}}/>\n            <MultiCascader cascade={false} data={linesToShowOptions} value={linesToShow} onChange={handleChangeLines} searchable={false}/>\n        </>\n    )\n}\n\nexport default Filters","import React, { useContext } from 'react'\nimport Stat, { communitiesDict } from '../data/types/stat'\nimport { LineChart, XAxis, YAxis, Tooltip, Line, ResponsiveContainer } from 'recharts'\nimport { Panel } from 'rsuite'\nimport moment from 'moment'\nimport StatContext from '../contexts/statContext'\n\ntype Props = {\n    linesToShow: {\n        infected: boolean\n        hospitalized: boolean\n        intensiveHospitalized: boolean\n        deaths: boolean\n        recovered: boolean\n    }\n}\n\n\nexport function CommunityStat({ stats, label, linesToShow, height }: { stats: Stat[], label: string, height?: string } & Props) {\n    let lineProps: Partial<Line['props']> = { type: 'monotone', dot: false, animationDuration: 750}\n    return (\n        <Panel header={label} bordered shaded bodyFill defaultExpanded style={{ direction: 'ltr', margin: '10px 5px', backgroundColor: 'white', flexShrink: 0 }}>\n            <div style={{ height: height, padding: '0 20px'}}>\n                <ResponsiveContainer>\n                    <LineChart syncId=\"communitiesChart\" data={stats} >\n                        <XAxis dataKey=\"dateStr\" tickFormatter={d => moment(d).format('DD/MM')}/>\n                        <YAxis tickFormatter={v => `${Math.floor(v / 1000)}k`} width={30}/>\n                        <Tooltip labelFormatter={d => moment(d).format('DD/MM/YY')}/>\n\n                        {linesToShow.infected && <Line {...lineProps} dataKey=\"infected\" />}\n                        {linesToShow.hospitalized && <Line {...lineProps} dataKey=\"hospitalized\" />}\n                        {linesToShow.intensiveHospitalized && <Line {...lineProps} dataKey=\"intensiveHospitalized\" />}\n                        {linesToShow.deaths && <Line {...lineProps} dataKey=\"deaths\" />}\n                        {linesToShow.recovered && <Line {...lineProps} dataKey=\"recovered\" />}\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n        </Panel>\n    )\n}\n\nexport function CommunitiesStats({ linesToShow }: Props) {\n    const stats = useContext(StatContext)\n    const communities = Array.from(new Set(stats.map(s => s.community)))\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', overflowY: 'auto', height: '100%', direction: 'rtl' }}>\n            {communities.map((community, idx) => (\n                <CommunityStat\n                    linesToShow={linesToShow}\n                    label={communitiesDict[community || ''] || ''}\n                    key={idx}\n                    stats={stats.filter(s => s.community === community)}\n                    height=\"200px\"\n                />\n            ))}\n        </div>\n    )\n}\n\nCommunitiesStats.defaultProps = {\n    linesToShow: {\n        infected: true,\n        hospitalized: true,\n        intensiveHospitalized: true,\n        deaths: true,\n        recovered: true,\n    }\n}\n\nexport default CommunitiesStats","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { downloadStats } from './data/api';\nimport { Stat } from './data/types/stat';\nimport statsContext from './contexts/statContext'\nimport Filters from './components/filters'\nimport IFilters from './data/types/filters'\nimport CommunitiesStats, { CommunityStat } from './components/communitiesStats'\nimport moment from 'moment'\nimport LAST_UPDATED from './last_updated'\n\nfunction App() {\n\n  const [stats, setStats] = useState<Stat[]>([])\n  const [aggregatedStats, setAggregatedStats] = useState<Stat[]>([])\n  const [originalStats, setOriginalStats] = useState<Stat[]>([])\n  const [filters, setFilters] = useState<IFilters>({\n    from: undefined,\n    to: undefined,\n    communities: [\"MD\"],\n    linesToShow: { deaths: true, recovered: true, hospitalized: true, infected: true, intensiveHospitalized: true }\n  })\n\n  const filterStats = (): void => {\n    const filteredStats = originalStats\n      .filter(s => filters.from ? s.date >= filters.from : true)\n      .filter(s => filters.to ? s.date <= filters.to : true)\n      .filter(s => filters.communities.length > 0 ? filters.communities.includes(s.community || '') : true)\n    setStats(filteredStats)\n  }\n\n  const handleFilterChange = (filters: IFilters): void => {\n    setFilters(filters)\n  }\n\n  useEffect(filterStats, [filters, originalStats])\n\n  useEffect(() => {\n    downloadStats().then(([stats, aggregatedStats]) => {\n      setOriginalStats(stats)\n      setAggregatedStats(aggregatedStats)\n    })\n  }, [])\n\n  return (\n    <statsContext.Provider value={stats}>\n      <div className=\"App\" style={{ display: \"flex\", flexDirection: \"column\"}}>\n        <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"flex-start\" }}>\n          <Filters filters={filters} handleChange={handleFilterChange} />\n          <div style={{flexGrow: 1, textAlign: 'right'}}>\n            Last updated: {moment(LAST_UPDATED).format('DD/MM')}\n          </div>\n        </div>\n        <div style={{ display: 'flex', flexDirection: 'row', height: 'calc(100% - 50px)' }}>\n          <div style={{ flexBasis: '35%', height: '100%' }}>\n            <CommunitiesStats linesToShow={filters.linesToShow} />\n          </div>\n          <div style={{ flexGrow: 1, height: 'calc(100% - 50px)'}}>\n            <CommunityStat\n              stats={aggregatedStats}\n              label=\"All\"\n              linesToShow={filters.linesToShow}\n              height=\"500px\"\n            />\n          </div>\n        </div>\n      </div>\n    </statsContext.Provider>\n  );\n}\n\nexport default App;\n","export default \"Tue Apr 14 19:35:10 UTC 2020\"\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'rsuite/dist/styles/rsuite-default.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}